version: "3"

# Taskfile for DotNetApiDiff project
# https://taskfile.dev

vars:
  SOLUTION: DotNetApiDiff.sln
  PROJECT: src/DotNetApiDiff/DotNetApiDiff.csproj
  TEST_PROJECT: tests/DotNetApiDiff.Tests/DotNetApiDiff.Tests.csproj
  COVERAGE_DIR: coverage-report
  TEST_REPORT_DIR: test-report

tasks:
  default:
    desc: Lists all available tasks
    cmds:
      - task --list

  build:
    desc: Build the solution
    cmds:
      - dotnet build {{.SOLUTION}} --configuration Release

  clean:
    desc: Clean build outputs
    cmds:
      - dotnet clean {{.SOLUTION}}
      - task: clean:coverage

  clean:coverage:
    desc: Clean coverage reports
    cmds:
      - npx rimraf {{.COVERAGE_DIR}}

  restore:
    desc: Restore NuGet packages
    cmds:
      - dotnet restore {{.SOLUTION}}

  test:
    desc: Run all tests
    cmds:
      - dotnet test {{.SOLUTION}} --configuration Release

  test:unit:
    desc: Run unit tests only
    cmds:
      - dotnet test {{.TEST_PROJECT}} --filter "Category=Unit" --configuration Release

  test:integration:
    desc: Run integration tests only
    cmds:
      - dotnet test {{.TEST_PROJECT}} --filter "Category=Integration" --configuration Release

  test:report:
    desc: Run tests with detailed HTML report
    cmds:
      - mkdir -p {{.TEST_REPORT_DIR}}
      - dotnet test {{.TEST_PROJECT}} --results-directory {{.TEST_REPORT_DIR}} --logger "html;LogFileName=test-results.html"
      - echo "Test report generated in {{.TEST_REPORT_DIR}}/test-results.html"

  ensure-test-report:
    desc: Ensure test report exists
    internal: true
    cmds:
      - |
        if [ ! -f "{{.TEST_REPORT_DIR}}/test-results.html" ]; then
          echo "Test report not found. Generating it now..."
          task test:report
        fi

  test:report:view:
    desc: Open test report in default browser (generates report if it doesn't exist)
    cmds:
      - task: ensure-test-report
      - |
        {{if eq OS "windows"}}
        cmd.exe /c start {{.TEST_REPORT_DIR}}/test-results.html
        {{else if eq OS "darwin"}}
        open {{.TEST_REPORT_DIR}}/test-results.html
        {{else}}
        xdg-open {{.TEST_REPORT_DIR}}/test-results.html
        {{end}}

  test:watch:
    desc: Run tests in watch mode (rerun on file changes)
    cmds:
      - dotnet watch test --project {{.TEST_PROJECT}}

  coverage:
    desc: Generate code coverage report
    cmds:
      - dotnet test {{.TEST_PROJECT}} /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=./coverage.info
      - mkdir -p {{.COVERAGE_DIR}}
      - task: coverage:report

  coverage:report:
    desc: Generate HTML report from coverage data
    cmds:
      - dotnet tool restore
      - dotnet reportgenerator -reports:tests/DotNetApiDiff.Tests/coverage.info -targetdir:{{.COVERAGE_DIR}} -reporttypes:Html

  coverage:report:detailed:
    desc: Generate detailed HTML report with multiple formats
    cmds:
      - dotnet tool restore
      - dotnet reportgenerator -reports:tests/DotNetApiDiff.Tests/coverage.info -targetdir:{{.COVERAGE_DIR}} -reporttypes:"Html;HtmlSummary;Cobertura;TextSummary"
      - echo "Coverage report generated in {{.COVERAGE_DIR}}"
      - cat {{.COVERAGE_DIR}}/Summary.txt

  ensure-coverage-report:
    desc: Ensure coverage report exists
    internal: true
    cmds:
      - |
        if [ ! -f "{{.COVERAGE_DIR}}/index.html" ]; then
          echo "Coverage report not found. Generating it now..."
          task coverage
        fi

  coverage:view:
    desc: Open coverage report in default browser (generates report if it doesn't exist)
    cmds:
      - task: ensure-coverage-report
      - |
        {{if eq OS "windows"}}
        cmd.exe /c start {{.COVERAGE_DIR}}/index.html
        {{else if eq OS "darwin"}}
        open {{.COVERAGE_DIR}}/index.html
        {{else}}
        xdg-open {{.COVERAGE_DIR}}/index.html
        {{end}}

  tools:install:
    desc: Install required dotnet tools
    cmds:
      - dotnet new tool-manifest --force || true
      - dotnet tool install dotnet-reportgenerator-globaltool --ignore-failed-sources --version 5.2.0
      - dotnet tool install dotnet-format --ignore-failed-sources
      - dotnet tool install dotnet-outdated-tool --ignore-failed-sources

  tools:restore:
    desc: Restore dotnet tools
    cmds:
      - dotnet tool restore

  deps:install:
    desc: Install npm dependencies
    cmds:
      - npm install

  run:
    desc: Run the application
    cmds:
      - dotnet run --project {{.PROJECT}} -- {{.CLI_ARGS}}

  publish:
    desc: Publish the application
    cmds:
      - dotnet publish {{.PROJECT}} -c Release -o ./publish

  code:format:
    desc: Format code using dotnet-format
    cmds:
      - dotnet tool restore
      - dotnet format

  code:format:verify:
    desc: Verify code formatting without making changes
    cmds:
      - dotnet tool restore
      - dotnet format --verify-no-changes

  code:analyze:
    desc: Run code analysis with analyzers
    cmds:
      - dotnet build {{.SOLUTION}} --no-restore /p:EnforceCodeStyleInBuild=true /p:EnableNETAnalyzers=true /p:AnalysisLevel=latest /p:TreatWarningsAsErrors=true

  code:outdated:
    desc: Check for outdated NuGet packages
    cmds:
      - dotnet tool restore
      - dotnet outdated --version-lock Major

  code:analyzers:install:
    desc: Install code analyzers to projects
    cmds:
      - dotnet add src/DotNetApiDiff/DotNetApiDiff.csproj package Microsoft.CodeAnalysis.NetAnalyzers
      - dotnet add src/DotNetApiDiff/DotNetApiDiff.csproj package StyleCop.Analyzers
      - dotnet add tests/DotNetApiDiff.Tests/DotNetApiDiff.Tests.csproj package Microsoft.CodeAnalysis.NetAnalyzers

  code:quality:
    desc: Run all code quality checks
    cmds:
      - task: code:format:verify
      - task: code:analyze
      - task: code:outdated

  code:fix:stylecop:
    desc: Run StyleCop fix scripts
    cmds:
      - powershell -ExecutionPolicy Bypass -File ./scripts/Fix-SA1513.ps1
      - powershell -ExecutionPolicy Bypass -File ./scripts/Fix-ConstructorInitializers.ps1
      - powershell -ExecutionPolicy Bypass -File ./scripts/Fix-ParameterFormatting.ps1
      - powershell -ExecutionPolicy Bypass -File ./scripts/Fix-TrailingCommas.ps1
      - powershell -ExecutionPolicy Bypass -File ./scripts/Add-FinalNewlines.ps1

  ci:
    desc: Run CI build and test sequence
    cmds:
      - task: deps:install
      - task: clean
      - task: restore
      - task: code:quality
      - task: build
      - task: test
      - task: coverage
